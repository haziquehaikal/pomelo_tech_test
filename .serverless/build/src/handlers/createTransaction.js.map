{
  "version": 3,
  "sources": ["../../../../src/handlers/createTransaction.ts", "../../../../src/services/transactionService.ts", "../../../../node_modules/uuid/dist/esm-node/stringify.js", "../../../../node_modules/uuid/dist/esm-node/rng.js", "../../../../node_modules/uuid/dist/esm-node/native.js", "../../../../node_modules/uuid/dist/esm-node/v4.js"],
  "sourcesContent": ["import { Handler, APIGatewayProxyHandler } from 'aws-lambda';\nimport { Transaction } from '../interface/transaction';\nimport { transactionService } from '../services/transactionService';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport const handler: Handler = async (event) => {\n    try {\n        const { amount, status } = JSON.parse(event.body!);\n\n        if (!amount || !status) {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({ message: 'Missing required fields: amount and status' }),\n            };\n        }\n\n        const newTransaction: Transaction = {\n            id: uuidv4(),\n            amount,\n            currency: 'USD', // Assuming currency is USD by default\n            status,\n        };\n\n        transactionService.createTransaction(newTransaction);\n\n        // transactions.push(newTransaction);\n\n        return {\n            statusCode: 201,\n            body: JSON.stringify(newTransaction),\n        };\n    } catch (error) {\n        return {\n            statusCode: 500,\n            body: JSON.stringify({ message: 'Internal server error' }),\n        };\n    }\n};", "import { Transaction } from \"../interface/transaction\";\n\n\nclass TransactionService {\n\n    //STORE TEMP STATE\n    private transactions: Transaction[] = [];\n\n\n    createTransaction(transaction: Transaction) {\n\n        this.transactions.push(transaction);\n\n    }\n\n    getTransactions() {\n\n        return this.transactions\n    }\n\n}\n\nexport const transactionService = new TransactionService();", "import validate from './validate.js';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  //\n  // Note to future-self: No, you can't remove the `toLowerCase()` call.\n  // REF: https://github.com/uuidjs/uuid/pull/677#issuecomment-1757351351\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;", "import crypto from 'node:crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import crypto from 'node:crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGA,IAAM,qBAAN,MAAyB;AAAA;AAAA,EAGb,eAA8B,CAAC;AAAA,EAGvC,kBAAkB,aAA0B;AAExC,SAAK,aAAa,KAAK,WAAW;AAAA,EAEtC;AAAA,EAEA,kBAAkB;AAEd,WAAO,KAAK;AAAA,EAChB;AAEJ;AAEO,IAAM,qBAAqB,IAAI,mBAAmB;;;AChBzD,IAAM,YAAY,CAAC;AACnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAClD;AACO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAM/C,UAAQ,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,IAAI,MAAM,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,IAAI,UAAU,IAAI,SAAS,EAAE,CAAC,GAAG,YAAY;AACngB;;;ACjBA,yBAAmB;AACnB,IAAM,YAAY,IAAI,WAAW,GAAG;AACpC,IAAI,UAAU,UAAU;AACT,SAAR,MAAuB;AAC5B,MAAI,UAAU,UAAU,SAAS,IAAI;AACnC,uBAAAA,QAAO,eAAe,SAAS;AAC/B,cAAU;AAAA,EACZ;AACA,SAAO,UAAU,MAAM,SAAS,WAAW,EAAE;AAC/C;;;ACTA,IAAAC,sBAAmB;AACnB,IAAO,iBAAQ;AAAA,EACb,YAAY,oBAAAC,QAAO;AACrB;;;ACAA,SAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACzC,WAAO,eAAO,WAAW;AAAA,EAC3B;AACA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAGpD,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAC3B,OAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAO;AAG3B,MAAI,KAAK;AACP,aAAS,UAAU;AACnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,SAAS,CAAC,IAAI,KAAK,CAAC;AAAA,IAC1B;AACA,WAAO;AAAA,EACT;AACA,SAAO,gBAAgB,IAAI;AAC7B;AACA,IAAO,aAAQ;;;ALlBR,IAAM,UAAmB,OAAO,UAAU;AAC7C,MAAI;AACA,UAAM,EAAE,QAAQ,OAAO,IAAI,KAAK,MAAM,MAAM,IAAK;AAEjD,QAAI,CAAC,UAAU,CAAC,QAAQ;AACpB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,SAAS,6CAA6C,CAAC;AAAA,MAClF;AAAA,IACJ;AAEA,UAAM,iBAA8B;AAAA,MAChC,IAAI,WAAO;AAAA,MACX;AAAA,MACA,UAAU;AAAA;AAAA,MACV;AAAA,IACJ;AAEA,uBAAmB,kBAAkB,cAAc;AAInD,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,cAAc;AAAA,IACvC;AAAA,EACJ,SAAS,OAAO;AACZ,WAAO;AAAA,MACH,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,wBAAwB,CAAC;AAAA,IAC7D;AAAA,EACJ;AACJ;",
  "names": ["crypto", "import_node_crypto", "crypto"]
}
